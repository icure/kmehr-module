/*
 * Copyright (c) 2020. Taktik SA, All rights reserved.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2019.05.22 at 08:11:32 PM CEST
//


package org.taktik.icure.be.ehealth.samws.v2.consultation;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ReferenceEntityType.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ReferenceEntityType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="AtcClassification"/>
 *     &lt;enumeration value="DeliveryModus"/>
 *     &lt;enumeration value="DeliveryModusSpecification"/>
 *     &lt;enumeration value="DeviceType"/>
 *     &lt;enumeration value="PackagingClosure"/>
 *     &lt;enumeration value="PackagingMaterial"/>
 *     &lt;enumeration value="PackagingType"/>
 *     &lt;enumeration value="PharmaceuticalForm"/>
 *     &lt;enumeration value="RouteOfAdministration"/>
 *     &lt;enumeration value="Substance"/>
 *     &lt;enumeration value="NoSwitchReason"/>
 *     &lt;enumeration value="VirtualForm"/>
 *     &lt;enumeration value="Wada"/>
 *     &lt;enumeration value="NoGenericPrescriptionReason"/>
 *     &lt;enumeration value="Appendix"/>
 *     &lt;enumeration value="FormCategory"/>
 *     &lt;enumeration value="Parameter"/>
 *     &lt;enumeration value="ReimbursementCriterion"/>
 *     &lt;enumeration value="StandardForm"/>
 *     &lt;enumeration value="StandardRoute"/>
 *     &lt;enumeration value="StandardSubstance"/>
 *     &lt;enumeration value="StandardUnit"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "ReferenceEntityType")
@XmlEnum
public enum ReferenceEntityType {

    @XmlEnumValue("AtcClassification")
    ATC_CLASSIFICATION("AtcClassification"),
    @XmlEnumValue("DeliveryModus")
    DELIVERY_MODUS("DeliveryModus"),
    @XmlEnumValue("DeliveryModusSpecification")
    DELIVERY_MODUS_SPECIFICATION("DeliveryModusSpecification"),
    @XmlEnumValue("DeviceType")
    DEVICE_TYPE("DeviceType"),
    @XmlEnumValue("PackagingClosure")
    PACKAGING_CLOSURE("PackagingClosure"),
    @XmlEnumValue("PackagingMaterial")
    PACKAGING_MATERIAL("PackagingMaterial"),
    @XmlEnumValue("PackagingType")
    PACKAGING_TYPE("PackagingType"),
    @XmlEnumValue("PharmaceuticalForm")
    PHARMACEUTICAL_FORM("PharmaceuticalForm"),
    @XmlEnumValue("RouteOfAdministration")
    ROUTE_OF_ADMINISTRATION("RouteOfAdministration"),
    @XmlEnumValue("Substance")
    SUBSTANCE("Substance"),
    @XmlEnumValue("NoSwitchReason")
    NO_SWITCH_REASON("NoSwitchReason"),
    @XmlEnumValue("VirtualForm")
    VIRTUAL_FORM("VirtualForm"),
    @XmlEnumValue("Wada")
    WADA("Wada"),
    @XmlEnumValue("NoGenericPrescriptionReason")
    NO_GENERIC_PRESCRIPTION_REASON("NoGenericPrescriptionReason"),
    @XmlEnumValue("Appendix")
    APPENDIX("Appendix"),
    @XmlEnumValue("FormCategory")
    FORM_CATEGORY("FormCategory"),
    @XmlEnumValue("Parameter")
    PARAMETER("Parameter"),
    @XmlEnumValue("ReimbursementCriterion")
    REIMBURSEMENT_CRITERION("ReimbursementCriterion"),
    @XmlEnumValue("StandardForm")
    STANDARD_FORM("StandardForm"),
    @XmlEnumValue("StandardRoute")
    STANDARD_ROUTE("StandardRoute"),
    @XmlEnumValue("StandardSubstance")
    STANDARD_SUBSTANCE("StandardSubstance"),
    @XmlEnumValue("StandardUnit")
    STANDARD_UNIT("StandardUnit");
    private final String value;

    ReferenceEntityType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReferenceEntityType fromValue(String v) {
        for (ReferenceEntityType c: ReferenceEntityType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
